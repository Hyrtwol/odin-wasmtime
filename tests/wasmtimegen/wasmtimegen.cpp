#define WIN32_LEAN_AND_MEAN // Exclude rarely-used stuff from Windows headers
#include <windows.h>
#include <timeapi.h>
#include <mmeapi.h>
#include <windns.h>
#include <commdlg.h>
#include <winver.h>
#include <shobjidl.h>
#include <shlobj.h>
#include <shlwapi.h>
#include <iostream>
#include <fstream>
#include <filesystem>
#include <map>

#include <assert.h>
#include <stdio.h>
#include <stdlib.h>
#include <wasi.h>
#include <wasm.h>
#include <wasmtime.h>

using namespace std;
using namespace std::filesystem;

#define test_proc_begin() out \
	<< endl \
	<< "@(test)" << endl \
	<< __func__ << " :: proc(t: ^testing.T) {" << endl

#define test_proc_end() out \
	<< "}" << endl

#define test_proc_using(name) out \
	<< '\t' << "using " << name << endl

#define test_proc_comment(comment) out \
	<< '\t' << "// " << comment << endl

#define expect_size(s) out \
	<< '\t' << "expect_size(t, wt." << #s << ", " \
	<< std::dec << sizeof(s) << ")" << endl

#define expect_value(s) out \
	<< '\t' << "expect_value(t, wt." << #s << ", " \
	<< "0x" << std::uppercase << std::setfill('0') << std::setw(8) << std::hex << s << ")" << endl

#define expect_value_32(s) out \
	<< '\t' << "expect_value(t, u32(wt." << #s << "), " \
	<< "0x" << std::uppercase << std::setfill('0') << std::setw(8) << std::hex << (ULONG)(ULONG_PTR)(s) << ")" << endl

#define expect_value_64(s) out \
	<< '\t' << "expect_value_64(t, u64(wt." << #s << "), " \
	<< "0x" << std::uppercase << std::setfill('0') << std::setw(8) << std::hex << s << ")" << endl

std::string ConvertLPCWSTRToString(const LPCWSTR lpcwszStr)
{
	int strLength = WideCharToMultiByte(CP_UTF8, 0, lpcwszStr, -1, nullptr, 0, nullptr, nullptr) - 1;
	string str(strLength, 0);
	WideCharToMultiByte(CP_UTF8, 0, lpcwszStr, -1, &str[0], strLength, nullptr, nullptr);
	return std::string(str);
}

#define expect_value_str(s) out \
	<< '\t' << "expect_value_str(t, wt." << #s << ", L(\"" << ConvertLPCWSTRToString(s) << "\"))" << endl

#define __acrt_iob_func(x) x

void verify_type_sizes(ofstream& out) {
	test_proc_begin();
	expect_size(size_t);
	expect_size(wasm_byte_vec_t);
	expect_size(wasm_limits_t);
	expect_size(wasm_valtype_vec_t);
	expect_size(wasm_functype_vec_t);
	expect_size(wasm_globaltype_vec_t);
	expect_size(wasm_tabletype_vec_t);
	expect_size(wasm_memorytype_vec_t);
	expect_size(wasm_externtype_vec_t);
	expect_size(wasm_importtype_vec_t);
	expect_size(wasm_exporttype_vec_t);
	expect_size(wasm_val_t);
	expect_size(wasm_val_vec_t);
	expect_size(wasm_frame_vec_t);
	expect_size(wasm_extern_vec_t);
	expect_size(wasmtime_linear_memory_t);
	expect_size(wasmtime_memory_creator_t);
	expect_size(wasmtime_func_t);
	expect_size(wasmtime_table_t);
	expect_size(wasmtime_memory_t);
	expect_size(wasmtime_global_t);
	expect_size(wasmtime_extern_t);
	expect_size(wasmtime_val_t);
	expect_size(wasmtime_instance_t);
	expect_size(wasmtime_guestprofiler_modules_t);
	expect_size(wasmtime_async_continuation_t);
	expect_size(wasmtime_stack_memory_t);
	expect_size(wasmtime_stack_creator_t);
	expect_size(wasmtime_extern_union_t);
	expect_size(wasmtime_valunion_t);
	expect_size(wasmtime_val_raw_t);
    //expect_value(MEMORY_PAGE_SIZE);
    //expect_value(wasm_limits_max_default);
    expect_value(stdin);
    expect_value(stdout);
    expect_value(stderr);
	test_proc_end();
}

void test_wasmtime(ofstream& out) {
	out << "#+build windows" << endl
		<< "package " << __func__
		<< " // generated by " << path(__FILE__).filename().replace_extension("").string() << endl
		<< endl
		<< "import \"core:testing\"" << endl
		<< "import wt \"..\"" << endl;
    verify_type_sizes(out);
}

int main(int argc, char* argv[]) {
	if (argc < 2) { cout << "Usage: " << path(argv[0]).filename().string() << " <odin-output-file>" << endl; return -1; }
	auto filepath = path(argv[1]);
	cout << "Writing " << filepath.string() << endl;
	ofstream out(filepath);
    test_wasmtime(out);
	out.close();
}
